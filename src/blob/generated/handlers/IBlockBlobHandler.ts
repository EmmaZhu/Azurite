/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
// tslint:disable:max-line-length

import * as Models from "../artifacts/models";
import Context from "../Context";

export default interface IBlockBlobHandler {
  upload(body: NodeJS.ReadableStream, contentLength: number, containerName: string, blob: string, options: Models.BlockBlobUploadOptionalParams, context: Context): Promise<Models.BlockBlobUploadResponse>;
  putBlobFromUrl(contentLength: number, copySource: string, containerName: string, blob: string, options: Models.BlockBlobPutBlobFromUrlOptionalParams, context: Context): Promise<Models.BlockBlobPutBlobFromUrlResponse>;
  stageBlock(blockId: string, contentLength: number, body: NodeJS.ReadableStream, containerName: string, blob: string, options: Models.BlockBlobStageBlockOptionalParams, context: Context): Promise<Models.BlockBlobStageBlockResponse>;
  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, containerName: string, blob: string, options: Models.BlockBlobStageBlockFromURLOptionalParams, context: Context): Promise<Models.BlockBlobStageBlockFromURLResponse>;
  commitBlockList(blocks: Models.BlockLookupList, containerName: string, blob: string, options: Models.BlockBlobCommitBlockListOptionalParams, context: Context): Promise<Models.BlockBlobCommitBlockListResponse>;
  getBlockList(containerName: string, blob: string, options: Models.BlockBlobGetBlockListOptionalParams, context: Context): Promise<Models.BlockBlobGetBlockListResponse>;
}
