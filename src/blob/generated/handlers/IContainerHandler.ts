/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
// tslint:disable:max-line-length

import * as Models from "../artifacts/models";
import Context from "../Context";

export default interface IContainerHandler {
  create(containerName: string, options: Models.ContainerCreateOptionalParams, context: Context): Promise<Models.ContainerCreateResponse>;
  getProperties(containerName: string, options: Models.ContainerGetPropertiesOptionalParams, context: Context): Promise<Models.ContainerGetPropertiesResponse>;
  getPropertiesWithHead(containerName: string, options: Models.ContainerGetPropertiesWithHeadOptionalParams, context: Context): Promise<Models.ContainerGetPropertiesWithHeadResponse>;
  delete(containerName: string, options: Models.ContainerDeleteMethodOptionalParams, context: Context): Promise<Models.ContainerDeleteResponse>;
  setMetadata(containerName: string, options: Models.ContainerSetMetadataOptionalParams, context: Context): Promise<Models.ContainerSetMetadataResponse>;
  getAccessPolicy(containerName: string, options: Models.ContainerGetAccessPolicyOptionalParams, context: Context): Promise<Models.ContainerGetAccessPolicyResponse>;
  setAccessPolicy(containerName: string, options: Models.ContainerSetAccessPolicyOptionalParams, context: Context): Promise<Models.ContainerSetAccessPolicyResponse>;
  restore(containerName: string, options: Models.ContainerRestoreOptionalParams, context: Context): Promise<Models.ContainerRestoreResponse>;
  submitBatch(body: NodeJS.ReadableStream, contentLength: number, multipartContentType: string, containerName: string, options: Models.ContainerSubmitBatchOptionalParams, context: Context): Promise<Models.ContainerSubmitBatchResponse>;
  filterBlobs(containerName: string, options: Models.ContainerFilterBlobsOptionalParams, context: Context): Promise<Models.ContainerFilterBlobsResponse>;
  acquireLease(containerName: string, options: Models.ContainerAcquireLeaseOptionalParams, context: Context): Promise<Models.ContainerAcquireLeaseResponse>;
  releaseLease(leaseId: string, containerName: string, options: Models.ContainerReleaseLeaseOptionalParams, context: Context): Promise<Models.ContainerReleaseLeaseResponse>;
  renewLease(leaseId: string, containerName: string, options: Models.ContainerRenewLeaseOptionalParams, context: Context): Promise<Models.ContainerRenewLeaseResponse>;
  breakLease(containerName: string, options: Models.ContainerBreakLeaseOptionalParams, context: Context): Promise<Models.ContainerBreakLeaseResponse>;
  changeLease(leaseId: string, proposedLeaseId: string, containerName: string, options: Models.ContainerChangeLeaseOptionalParams, context: Context): Promise<Models.ContainerChangeLeaseResponse>;
  listBlobFlatSegment(containerName: string, options: Models.ContainerListBlobFlatSegmentOptionalParams, context: Context): Promise<Models.ContainerListBlobFlatSegmentResponse>;
  listBlobHierarchySegment(delimiter: string, containerName: string, options: Models.ContainerListBlobHierarchySegmentOptionalParams, context: Context): Promise<Models.ContainerListBlobHierarchySegmentResponse>;
  getAccountInfo(containerName: string, context: Context): Promise<Models.ContainerGetAccountInfoResponse>;
  getAccountInfoWithHead(containerName: string, context: Context): Promise<Models.ContainerGetAccountInfoWithHeadResponse>;
}
